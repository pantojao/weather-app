{"version":3,"sources":["cityInput.js","App.js","serviceWorker.js","index.js"],"names":["CityInput","props","sendCity","city","parentCallBack","console","log","handleChange","event","setState","input","target","value","handleSubmit","preventDefault","state","onSubmit","this","className","id","type","size","React","Component","fetch","require","App","callbackFunction","childData","split","join","cityFromInput","then","response","json","data","name","country","sys","description","weather","map","firstChar","rest","toUpperCase","toLowerCase","temperature","Math","round","main","temp","icon","error","catch","errorOutput","weatherOutput","style","textAlign","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPA8CiBA,G,wDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,SAAW,SAACC,GACR,EAAKF,MAAMG,eAAeD,GAC1BE,QAAQC,IAAIH,IAVG,EAanBI,aAAe,SAACC,GACZ,EAAKC,SAAS,CACZC,MAAOF,EAAMG,OAAOC,SAfP,EAmBnBC,aAAe,SAACL,GACZA,EAAMM,iBACN,EAAKZ,SAAS,EAAKa,MAAML,OACzB,EAAKD,SAAS,CACVN,KAAM,EAAKY,MAAML,MACjBA,MAAO,MAtBb,EAAKK,MAAQ,CACTH,MAAO,GACPT,KAAK,IAJQ,E,qDA4BT,IAAD,EACP,OACE,6BACI,0BAAMa,SAAUC,KAAKJ,aAAcK,UAAU,yBACzC,8BAAOC,GAAG,kBAAkBC,KAAK,OAAOC,KAAK,MAA7C,qBAAwD,QAAxD,0BAAyE,2BAAzE,4BAA+G,gBAA/G,sBAAqIJ,KAAKF,MAAML,OAAhJ,yBAAiKO,KAAKV,cAAtK,iCACA,4BAAQW,UAAU,4BAAlB,gB,GAlCQI,IAAMC,YCAxBC,G,MAAQC,EAAQ,KAwEPC,E,kDApEb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAYR0B,iBAAmB,SAACC,GAClB,IAAIzB,EAAOyB,EAAUC,MAAM,KAAKC,KAAK,KACrC,EAAKrB,SAAS,CAACsB,cAAe5B,IAC9BqB,EAAM,oDAAD,OAAqDrB,EAArD,2DACF6B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAK1B,SAAS,CAC1BN,KAAMgC,EAAKC,KACXC,QAASF,EAAKG,IAAID,QAClBE,YAAYJ,EAAKK,QAAQ,GAAGD,YAAYV,MAAM,KAAKY,KAAI,iCAAEC,EAAF,KAAeC,EAAf,kBAAuBD,EAAUE,cAAcD,EAAKb,KAAK,IAAIe,iBAAef,KAAK,KACxIgB,YAAYC,KAAKC,MAAMb,EAAKc,KAAKC,MACjCC,KAAMhB,EAAKK,QAAQ,GAAGW,KACtBC,MAAO,UAERC,OAAM,SAAAD,GAAK,OAAI,EAAK3C,SAAS,CAC5B2C,MAAO,gCAzBX,EAAKrC,MAAQ,CACXZ,KAAM,KACNkC,QAAS,KACTE,YAAY,KACZO,YAAY,EACZf,cAAc,KACdqB,MAAO,KACPD,KAAM,MATS,E,qDAgClB,IAAIG,EAOAC,EAcJ,OAnBED,EADqB,OAAnBrC,KAAKF,MAAMqC,MACA,uBAAGI,MAAQ,CAACC,UAAW,WAAvB,2BAEF,KAKZF,EADqB,OAAlBtC,KAAKF,MAAMZ,KAEZ,yBAAKe,UAAU,kBACb,4BAAMD,KAAKF,MAAMZ,KAAjB,KAA0Bc,KAAKF,MAAMsB,QAArC,KACA,wBAAInB,UAAU,eAAgBD,KAAKF,MAAMwB,YAAzC,KACA,yBAAKrB,UAAU,eAAewC,IAAG,2CAAsCzC,KAAKF,MAAMoC,KAAjD,WAAgEQ,IAAI,KACrG,4BAAM1C,KAAKF,MAAM+B,YAAjB,IAA+B,0CAIlB,KAIjB,yBAAK5B,UAAU,eACb,wBAAIA,UAAU,aAAd,eACA,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAWd,eAAgBa,KAAKU,mBAC/B2B,EACAC,Q,GA5DSjC,IAAMC,WCKJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAD,GACL/C,QAAQ+C,MAAMA,EAAMuB,a","file":"static/js/main.8ada97dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass CityInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          value: '',\r\n          city:''\r\n        };\r\n    }\r\n\r\n    sendCity = (city) => {\r\n        this.props.parentCallBack(city)\r\n        console.log(city)\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n          input: event.target.value\r\n        });\r\n      }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.sendCity(this.state.input)\r\n        this.setState({\r\n            city: this.state.input,\r\n            input: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n            <form onSubmit={this.handleSubmit} className=\"form-group input-form\">\r\n                <input id=\"searchTextField\" type=\"text\" size=\"50\"  type=\"text\" className=\"form-control task-input\" placeholder=\"New York, US\" value={this.state.input} onChange={this.handleChange} required/>\r\n                <button className=\"srch-btn btn btn-primary\">Search</button>\r\n            </form>\r\n        </div>\r\n\r\n      );\r\n    }\r\n  }\r\n\r\n  export default CityInput;","import React from 'react';\nimport CityInput from './cityInput.js'\nimport './App.css'\n\nconst fetch = require('node-fetch');\n\n// fa9fca898e9bad6c9268360e9225cdb4\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: null,\n      country: null,\n      description:null,\n      temperature:0,\n      cityFromInput:null,\n      error: null,\n      icon: null, \n    };\n  }\n  \n  callbackFunction = (childData) => {\n    let city = childData.split(' ').join('+');\n    this.setState({cityFromInput: city})\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=14be81d715612331f39ca17b922a70ef`)\n      .then(response => response.json())\n      .then(data => this.setState({ \n        city: data.name,\n        country: data.sys.country,\n        description:data.weather[0].description.split(\" \").map(([firstChar,...rest])=>firstChar.toUpperCase()+rest.join(\"\").toLowerCase()).join(\" \"),\n        temperature:Math.round(data.main.temp),\n        icon: data.weather[0].icon,\n        error: null\n        }))\n      .catch(error => this.setState({ \n        error: \"Please Enter Valid City\"\n        }));\n  }\n\n render(){\n   let errorOutput;\n   if (this.state.error!==null){\n     errorOutput= <p style= {{textAlign: \"center\" }}>Please Enter Valid City</p>;\n   } else {\n    errorOutput=null\n   }\n\n   let weatherOutput;\n   if (this.state.city!==null){\n    weatherOutput=(\n      <div className=\"weather-output\">\n        <h2>{(this.state.city)}, {this.state.country} </h2> \n        <h2 className=\"description\">{(this.state.description)} </h2>\n        <img className=\"weather-icon\" src={`http://openweathermap.org/img/wn/${this.state.icon}@2x.png`} alt=\"\"/> \n        <h2>{(this.state.temperature)} <span >&#8457;</span></h2>\n      </div>\n    )\n   } else {\n     weatherOutput = null\n   }\n\n   return(\n    <div className=\"weather-app\">\n      <h1 className=\"app-title\">Weather App</h1>\n      <div className=\"weather-box\">\n        <CityInput parentCallBack={this.callbackFunction} /> \n        {errorOutput}\n        {weatherOutput}\n      </div>\n    </div>\n\n\n   )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}